//file:noinspection GradlePackageVersionRange
plugins {
	id 'fabric-loom' version '1.5-SNAPSHOT'
	id 'maven-publish'
	id 'signing'
}

allprojects {
	apply plugin: "java"
	apply plugin: "fabric-loom"
	apply plugin: "maven-publish"
	apply plugin: "signing"

	version = "${project.mod_version}+${project.minecraft_version}"
  	group = rootProject.maven_group
  	accessWidener = project.access_widener  name = project.archives_base_name
 	url = project.url

	if (System.getenv("PUBLISH_TYPE") == "SNAPSHOT") {
    		uniqueId = generateRandomHexId(5)
		version = "${version}-${uniqueId}-SNAPSHOT"
	}


	tasks.withType(JavaCompile) {
		options.compilerArgs << "-Xlint:unchecked"
	}

	repositories {
		mavenCentral()
		exclusiveContent {
			forRepository {
				maven { name = "Modrinth"; url = "https://api.modrinth.com/maven" }
			}
			filter { includeGroup "maven.modrinth" }
		}
	}

	dependencies {
		minecraft "com.mojang:minecraft:${project.minecraft_version}"
		mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
		modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

		// (FabricAPI) modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    		// (Nixienaut) include (implementation(annotationProcessor("net.rotgruengelb:nixienaut:${project.nixienaut_version}")))
	}

	processResources {
		inputs.property "version", project.version
		inputs.property "minecraft_version", project.minecraft_version
		inputs.property "loader_version", project.loader_version
		filteringCharset "UTF-8"

		filesMatching("fabric.mod.json") {
			expand "version": project.version,
					"minecraft_version": project.minecraft_version,
					"loader_version": project.loader_version,
					"quirl_version": project.quirl_version
		}
	}

	loom {
		splitEnvironmentSourceSets()
    		if (accessWidener != "none") {
		  accessWidenerPath = file(accessWidener)
    		}

		mods {
			"$" {
				sourceSet sourceSets.main
				sourceSet sourceSets.client
			}
		}
	}

	def targetJavaVersion = 17
	tasks.withType(JavaCompile).configureEach {
		it.options.encoding = "UTF-8"
		if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
			it.options.release = targetJavaVersion
		}
	}

	java {
		def javaVersion = JavaVersion.toVersion(targetJavaVersion)
		if (JavaVersion.current() < javaVersion) {
			toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
		}
		withSourcesJar()
		withJavadocJar()
	}

	jar {
		from("LICENSE") {
			rename { "${it}_${project.base.archivesName.get()}" }
		}
	}

	publishing {
		publications {
			mavenJava(MavenPublication) {
				groupId = rootProject.maven_group
				artifactId = "${name}"
				version = "${version}"
				from components.java

				pom {
					name = "${name}"
					description = rootProject.description
					url = "https://${url}"
					licenses {
						license {
							name = 'MIT License'
							url = 'https://opensource.org/license/MIT'
						}
					}
					developers {
						developer {
							id = 'rotgruengelb'
							name = 'Daniel (aka. rotgruengelb)'
							email = 'rotgrungelblab@gmail.com'
						}
					}
					scm {
						connection = "scm:git:git://${url}.git"
						developerConnection = "scm:git:ssh://${url}.git"
						url = "https://${url}"
					}
				}
			}
		}

		repositories {
			maven {
				name = System.getenv("MAVEN1_NAME")
				url = System.getenv("MAVEN1_URL")
				credentials {
					username = System.getenv("MAVEN1_USERNAME")
					password = System.getenv("MAVEN1_PASSWORD")
				}
			}
      			if (System.getenv("MAVEN2_NAME") != "none") {
       				maven {
					name = System.getenv("MAVEN2_NAME")
				  	url = System.getenv("MAVEN2_URL")
				  	credentials {
						username = System.getenv("MAVEN2_USERNAME")
						password = System.getenv("MAVEN2_PASSWORD")
					}
				}
      			}
		}
	}

	signing {
		sign publishing.publications.mavenJava
	}


	javadoc {
		if (JavaVersion.current().isJava9Compatible()) {
			options.addBooleanOption('html5', true)
		}
	}
}

def generateRandomHexId(int length) {
    def hexChars = ('0123456789abcdef' as char[])

    def randomId = (1..length).collect {
        hexChars[(int) (Math.random() * hexChars.size())]
    }.join()

    return randomId
}
